{"version":3,"sources":["components/TaskAdder.tsx","components/TaskItem.tsx","state/Store.ts","containers/App.tsx","index.tsx"],"names":["TaskAdder","addTask","initialValue","useState","value","setValue","clearText","className","data-testid","type","placeholder","onChange","ev","preventDefault","currentTarget","onClick","TaskItem","id","isCompleted","onDelete","onComplete","textClass","checked","readOnly","store","observable","itemId","data","addItem","action","state","newId","completeItemToggle","dataClone","map","item","deleteItem","filter","App","handleAdd","TodosView","observer","TaskView","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"8RAQaA,EAAY,SAAC,GAGU,IAFlCC,EAEiC,EAFjCA,QAEiC,IADjCC,oBACiC,MADlB,GACkB,EACjC,EAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAOMC,EAAY,kBAAMD,EAAS,KAOjC,OACE,sBAAKE,UAAU,aAAf,UACE,wCAEE,uBACEH,MAAOA,EACPI,cAAY,kBACZC,KAAK,OACLC,YAAY,uBACZC,SArBa,SAACC,GACpBA,EAAGC,iBACHR,EAASO,EAAGE,cAAcV,aAsBxB,gCACE,wBAAQI,cAAY,iBAAiBO,QAlBzB,WACT,OAAPd,QAAO,IAAPA,KAAUG,GACVE,KAgBI,sBAGA,wBAAQE,cAAY,mBAAmBO,QAAST,EAAhD,+BC/BKU,G,MAAW,SAAC,GAMU,IALjCC,EAKgC,EALhCA,GACAb,EAIgC,EAJhCA,MACAc,EAGgC,EAHhCA,YACAC,EAEgC,EAFhCA,SACAC,EACgC,EADhCA,WAEMC,EAAYH,EAAc,2BAA6B,iBAC7D,OACE,sBAAKX,UAAU,YAAf,UACE,qBAAKC,cAAY,iBAAiBD,UAAWc,EAA7C,SACGjB,IAEH,uBACEW,QAAS,yBAAMK,QAAN,IAAMA,OAAN,EAAMA,EAAaH,IAC5BT,cAAY,qBACZD,UAAU,qBAHZ,UAKE,+CACA,uBACEC,cAAY,sBACZC,KAAK,WACLa,QAASJ,EACTK,UAAQ,OAGZ,wBACEf,cAAY,mBACZO,QAAS,yBAAMI,QAAN,IAAMA,OAAN,EAAMA,EAAWF,IAC1BV,UAAU,mBAHZ,yB,cCpBOiB,EAAoBC,YAAW,eATJ,CACtCC,OAAQ,EACRC,KAAM,CACJ,CAAEV,GAAI,EAAGb,MAAO,YAAac,aAAa,GAC1C,CAAED,GAAI,EAAGb,MAAO,YAAac,aAAa,GAC1C,CAAED,GAAI,EAAGb,MAAO,gBAAiBc,aAAa,OAMrCU,EAAUC,aAAO,SAACC,EAAmB1B,GAChD,GAAKA,EAAL,CAGA,IAAM2B,EAAQD,EAAMJ,OAAS,EAC7BI,EAAMJ,OAASK,EACfD,EAAMH,KAAN,CACE,CACEV,GAAIc,EACJ3B,QACAc,aAAa,IAJjB,mBAMKY,EAAMH,WAIAK,EAAqBH,aAChC,SAACC,EAAmBb,GAClB,IAAMgB,EAAYH,EAAMH,KAAKO,KAAI,SAACC,GAChC,OAAIA,EAAKlB,KAAOA,EACP,2BAAKkB,GAAZ,IAAkBjB,aAAciB,EAAKjB,cAEhCiB,KAETL,EAAMH,KAAN,YAAiBM,MAIRG,EAAaP,aAAO,SAACC,EAAmBb,GACnD,IAAMgB,EAAYH,EAAMH,KAAKU,QAAO,SAACF,GAAD,OAAUA,EAAKlB,KAAOA,KAC1Da,EAAMH,KAAN,YAAiBM,MCrCNK,G,MAAM,SAAC,GAAmD,IAAjDd,EAAgD,EAAhDA,MACdL,EAAW,SAACF,GAAD,OAAgBmB,EAAWZ,EAAOP,IAC7CG,EAAa,SAACH,GAAD,OAAgBe,EAAmBR,EAAOP,IACvDsB,EAAY,SAACnC,GAAD,OAAmBwB,EAAQJ,EAAOpB,IAE9CoC,EAAYC,aAAS,kBACzB,qBAAKjC,cAAY,qBAAjB,SACGgB,EAAMG,KAAKO,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,2BAEMA,GAFN,IAGEf,WAAYA,EACZD,SAAUA,IAHLgB,EAAKlB,YAQZyB,EAAWD,aAAS,kBAAM,cAAC,EAAD,CAAWxC,QAASsC,OAEpD,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAACmC,EAAD,IACA,cAACF,EAAD,S,QC5BNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQC,SAAUC,GAAlB,SACE,cAAC,EAAD,CAAKvB,MAAOA,QAGhBwB,SAASC,eAAe,W","file":"static/js/main.f315bce6.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\nimport \"./TaskAdder.css\";\n\nexport interface TaskAdderProps {\n  addTask?: (val: string) => void;\n  initialValue?: string;\n}\n\nexport const TaskAdder = ({\n  addTask,\n  initialValue = \"\",\n}: TaskAdderProps): JSX.Element => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (ev: ChangeEvent<HTMLInputElement>) => {\n    ev.preventDefault();\n    setValue(ev.currentTarget.value);\n  };\n\n  const clearText = () => setValue(\"\");\n\n  const handleAdd = () => {\n    addTask?.(value);\n    clearText();\n  };\n\n  return (\n    <div className=\"task-adder\">\n      <div>\n        Task:\n        <input\n          value={value}\n          data-testid=\"task-adder-text\"\n          type=\"text\"\n          placeholder=\"write your task here\"\n          onChange={handleChange}\n        />\n      </div>\n      <div>\n        <button data-testid=\"task-adder-add\" onClick={handleAdd}>\n          Add Task\n        </button>\n        <button data-testid=\"task-adder-clear\" onClick={clearText}>\n          Clear Text\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./TaskItem.css\";\n\nexport interface TaskItemProps {\n  id: number;\n  value: string;\n  isCompleted: boolean;\n  onDelete?: (id: number) => void;\n  onComplete?: (id: number) => void;\n}\n\nexport const TaskItem = ({\n  id,\n  value,\n  isCompleted,\n  onDelete,\n  onComplete,\n}: TaskItemProps): JSX.Element => {\n  const textClass = isCompleted ? \"task-item-text completed\" : \"task-item-text\";\n  return (\n    <div className=\"task-item\">\n      <div data-testid=\"task-item-text\" className={textClass}>\n        {value}\n      </div>\n      <span\n        onClick={() => onComplete?.(id)}\n        data-testid=\"task-item-complete\"\n        className=\"task-item-complete\"\n      >\n        <label>Completed:</label>\n        <input\n          data-testid=\"task-item-completed\"\n          type=\"checkbox\"\n          checked={isCompleted}\n          readOnly\n        />\n      </span>\n      <button\n        data-testid=\"task-item-delete\"\n        onClick={() => onDelete?.(id)}\n        className=\"task-item-delete\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n","import { observable, action } from \"mobx\";\nimport { TaskItemProps } from \"../components/TaskItem\";\n\nexport interface StoreProps {\n  itemId: number;\n  data: TaskItemProps[];\n}\n\nexport const initialStore: StoreProps = {\n  itemId: 3,\n  data: [\n    { id: 1, value: \"Learn TDD\", isCompleted: false },\n    { id: 2, value: \"Write TDD\", isCompleted: false },\n    { id: 3, value: \"Peace of mind\", isCompleted: false },\n  ],\n};\n\nexport const store: StoreProps = observable({ ...initialStore });\n\nexport const addItem = action((state: StoreProps, value: string): void => {\n  if (!value) {\n    return;\n  }\n  const newId = state.itemId + 1;\n  state.itemId = newId;\n  state.data = [\n    {\n      id: newId,\n      value,\n      isCompleted: false,\n    },\n    ...state.data,\n  ];\n});\n\nexport const completeItemToggle = action(\n  (state: StoreProps, id: number): void => {\n    const dataClone = state.data.map((item) => {\n      if (item.id === id) {\n        return { ...item, isCompleted: !item.isCompleted };\n      }\n      return item;\n    });\n    state.data = [...dataClone];\n  }\n);\n\nexport const deleteItem = action((state: StoreProps, id: number): void => {\n  const dataClone = state.data.filter((item) => item.id !== id);\n  state.data = [...dataClone];\n});\n","import { observer } from \"mobx-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { TaskAdder } from \"../components/TaskAdder\";\nimport { TaskItem } from \"../components/TaskItem\";\nimport {\n  addItem,\n  completeItemToggle,\n  deleteItem,\n  StoreProps,\n} from \"../state/Store\";\nimport \"./App.css\";\n\nexport const App = ({ store }: { store: StoreProps }): JSX.Element => {\n  const onDelete = (id: number) => deleteItem(store, id);\n  const onComplete = (id: number) => completeItemToggle(store, id);\n  const handleAdd = (value: string) => addItem(store, value);\n\n  const TodosView = observer(() => (\n    <div data-testid=\"app-todo-container\">\n      {store.data.map((item) => (\n        <TaskItem\n          key={item.id}\n          {...item}\n          onComplete={onComplete}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  ));\n  const TaskView = observer(() => <TaskAdder addTask={handleAdd} />);\n\n  return (\n    <div className=\"App\">\n      <h1>Ye Olde ToDo App</h1>\n      <TaskView />\n      <TodosView />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./containers/App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { store } from \"./state/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App store={store} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}